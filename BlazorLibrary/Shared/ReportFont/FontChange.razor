<div class="row mx-0 mb-3">
    @*Шрифт заголовка*@
    <div class="col-md-6">
        <label class="form-label">@RepoterRep["IDS_FONT_HEADER"]</label>
        @if (ReportFont != null)
        {
            <select class="form-select" @bind="ReportFont.FontSize">
                @foreach (var item in FontNameArr)
                {
                    <option value="@(Array.IndexOf(FontNameArr, item))">@item</option>
                }
            </select>
        }
        else
        {
            <PNoData />
        }

    </div>
    @*Шрифт информации*@
    <div class="col-md-6">
        <label class="form-label">@RepoterRep["IDS_FONT_TEXT"]</label>
        <BSecondary IsOutline="true" AddClass="w-100" Text="@GetNameFont()" OnClick="()=>IsViewEditFont=true" />
    </div>
</div>

<CheckP BitPos="NameBitsPos.Create">
    @if (IsViewEditFont)
    {
        <ModalDialog Title="@AsoRep["FontFamily"]" ButtonCloseEvent="()=>IsViewEditFont=false">
            <BodyContent>
                @*Шрифт*@
                <div class="mb-3">
                    <label class="form-label">@AsoRep["FontFamily"]</label>
                    <select class="form-select" @bind="NewReportFont.StrName">
                        @foreach (var item in FontFamilyList)
                        {
                            <option value="@item.Key">@item.Value</option>
                        }
                    </select>
                </div>
                @*Начертание*@
                <div class="mb-3">
                    <label class="form-label">@AsoRep["FontItalic"]</label>
                    <select class="form-select" @bind="NewReportFont.Style">
                        @foreach (var item in FontItalic)
                        {
                            <option value="@item.Key">@item.Value</option>
                        }
                    </select>
                </div>
                @*Размер*@
                <div class="mb-3">
                    <label class="form-label">@AsoRep["FontSize"]</label>
                    <select class="form-select" @bind="NewReportFont.Size">
                        @for (int i = 8; i < 48; i++)
                        {
                            if (i > 12)
                            {
                                i++;
                            }
                            <option value="@i">@i</option>
                        }
                    </select>
                </div>
            </BodyContent>
            <ButtonContent>
                <BSave OnClick="ChangeFont" />
                <BCancel OnClick="()=>IsViewEditFont=false" />
            </ButtonContent>
        </ModalDialog>
    }
</CheckP>


@code {
    [Parameter]
    public ReporterFont? ReportFont { get; set; }

    private string[] FontNameArr = { };

    private bool IsViewEditFont = false;

    private ReporterFont NewReportFont = new();

    private Dictionary<int, string> FontItalic = new();

    private Dictionary<string, string> FontFamilyList = new() {
                                        {"'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif", "Franklin Gothic Medium, Arial Narrow, Arial"},
                                        {"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif", "Segoe UI, Tahoma, Geneva, Verdana"},
                                        {"'Times New Roman', Times, serif", "Times New Roman, Times"},
                                        {"Arial", "Arial"},
                                        {"Arial, Helvetica, sans-serif", "Arial, Helvetica"},
                                        {"Calibri", "Calibri"},
                                        {"Georgia, 'Times New Roman', Times, serif", "Georgia, Times New Roman, Times"} };

    protected override void OnInitialized()
    {
        FontItalic = new() { { 1, RepoterRep["ordinary"] }, { 2, RepoterRep["italics"] }, { 3, RepoterRep["bold"] }, { 4, RepoterRep["bolditalics"] } };
        FontNameArr = new[] { RepoterRep["Smallest"].Value, RepoterRep["Small"].Value, RepoterRep["Average"].Value, RepoterRep["Large"].Value, RepoterRep["Largest"].Value };

        if (ReportFont != null)
        {
            NewReportFont.StrName = ReportFont.StrName;
            NewReportFont.Size = ReportFont.Size;
            if (ReportFont.Weight < 700 && ReportFont.Style == 0)
                NewReportFont.Style = 1;
            else if (ReportFont.Weight < 700 && ReportFont.Style == 255)
                NewReportFont.Style = 2;
            else if (ReportFont.Weight >= 700 && ReportFont.Style == 0)
                NewReportFont.Style = 3;
            else if (ReportFont.Weight >= 700 && ReportFont.Style == 255)
                NewReportFont.Style = 4;
        }
    }

    private void ChangeFont()
    {
        if (ReportFont == null)
            ReportFont = new();

        ReportFont.StrName = NewReportFont.StrName;

        switch (NewReportFont.Style)
        {
            case 1: { ReportFont.Weight = 400; ReportFont.Style = 0; }; break;
            case 2: { ReportFont.Weight = 400; ReportFont.Style = 255; }; break;
            case 3: { ReportFont.Weight = 700; ReportFont.Style = 0; }; break;
            case 4: { ReportFont.Weight = 700; ReportFont.Style = 255; }; break;
        }
        ReportFont.Size = NewReportFont.Size;

        IsViewEditFont = false;
    }

    private string GetNameFont()
    {
        string str = "";
        if (ReportFont != null)
        {
            str = ReportFont.StrName ?? "";

            if (ReportFont.Weight < 700 && 0 == ReportFont.Style)
                str += ", " + RepoterRep["ordinary"];
            else if (ReportFont.Weight < 700 && 0 != ReportFont.Style)
                str += ", " + RepoterRep["italics"];
            else if (ReportFont.Weight >= 700 && 0 == ReportFont.Style)
                str += ", " + RepoterRep["bold"];
            else if (ReportFont.Weight >= 700 && 0 != ReportFont.Style)
                str += ", " + RepoterRep["bolditalics"];
            str += ", " + ReportFont.Size + "pt";


        }
        return str;
    }
}
